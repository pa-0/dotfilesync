#!/bin/bash

################################
# Sync dotfiles to Github Gist #
################################

HOME_DIR=~
DOTFILESYNC_ROOT_PATH="~/.dotfilesync"
DOTFILESYNC_CONFIG_PATH="$DOTFILESYNC_ROOT_PATH/config.json"
eval DOTFILESYNC_CONFIG=$DOTFILESYNC_CONFIG_PATH
UNAME="$( command -v uname )"
OSTYPE="$( "${UNAME}" | tr '[:upper:]' '[:lower:]')"

backup() {
  cp -n $1{,.bak."$(date +%Y%m%d-%H%M%S)"}
}

addKeychainPassword() {
  case $OSTYPE in
    darwin*)
      security add-generic-password -a $1 -s $3 -w $2
      ;;
    linux*)
      echo $2 | secret-tool store --label $3 user $1 usage $3
      ;;
  esac
}

getKeychainPassword() {
  case $OSTYPE in
    darwin*)
      security find-generic-password -wga $1 -s $2
      ;;
    linux*)
      secret-tool lookup user $1 usage $2
      ;;
  esac
}

deleteKeychainPassword() {
  case $OSTYPE in
    darwin*)
      security delete-generic-password -a $1 -s $2
      ;;
    linux*)
      secret-tool clear user $1 usage $2
      ;;
  esac
}

getGistFileName() {
  echo $1 | sed -e "s:~:.:g; s:/:.:g" | awk '{gsub(/[.]+/,".")}1'
}

createPrivateGistWithConfigJson() {
  jq -cR -s 'split("") | join("") | {
      "description": "Generated by dotfilesync utility",
      "public": false,
      "files": {
        "'"$3"'": {
          "content": .
        }
      }
    }' | \
    curl -s -u $1:$2 -XPOST "https://api.github.com/gists" -d @- | \
    jq -r ".id"
}

updateGistFile() {
  jq -R -s 'split("") | join("") | {files: {"'"$4"'": {content: .}}}' | \
    curl -s -u $1:$2 -XPATCH "https://api.github.com/gists/$3" -d @- | \
    jq -r -e  'if .description then "updated: " + .description else . end'
}

getGistFile() {
  curl -s -u $1:$2 "https://api.github.com/gists/$3" | jq -r -e '.files."'"$4"'".content'
}

setup() {
  if [[ -f $DOTFILESYNC_CONFIG ]];
  then
    echo "Config file exists. Please uninstall any older versions of this script using the instructions here and then re-install it: https://github.com/snvishna/dotfilesync#uninstall"
    exit 1
  fi

  # Get gist username and password
  read -r -p "Enter your GitHub gist username: " github_user
  read -s -p "Enter the personal access token (with 'gist' permission scope setup): " github_password
  printf "\nSecurely storing $github_user's GitHub credentials in Keychain.\n"
  addKeychainPassword "$github_user" "$github_password" "dotfiles_sync"

  # Create a new config
  local config='
    {
      "githubUser": "'"$github_user"'",
      "gistId": "",
      "dotFilePaths": [
        "'"$DOTFILESYNC_CONFIG_PATH"'"
      ]
    }
  '
  local configGistName=$(getGistFileName "$DOTFILESYNC_CONFIG_PATH")

  # Create a new private gist
  echo "Creating a new private gist for $github_user"
  local newGistId=$(echo $config | jq '.' | createPrivateGistWithConfigJson "$github_user" "$github_password" "$configGistName")
  echo "dotfilesync gist created: https://gist.github.com/$github_user/$newGistId"
  
  # Update config with gistId
  config=$(echo $config | jq '.gistId = $id' --arg id $newGistId)

  # Write the updated config into local file system
  printf "Saving the following config file locally at $DOTFILESYNC_CONFIG_PATH:\n$(echo $config | jq -Cr)\n"
  echo $config | \
    jq '.' >| $DOTFILESYNC_CONFIG

  # Update the config in Gist
  echo "Updating the config in gist: $configGistName"
  echo $config | \
    jq '.' | \
    updateGistFile "$github_user" "$github_password" "$newGistId" "$configGistName"
}

failOnMissingConfig() {
  if [[ ! -f $DOTFILESYNC_CONFIG ]];
  then
      echo "Config file missing. Please follow the setup instructions from here: https://github.com/snvishna/dotfilesync#installation"
      exit 1
  fi
}

push() {
  failOnMissingConfig

  eval homedir=$HOME_DIR
  local config=$(cat $DOTFILESYNC_CONFIG)
  local dotfiles_gistid=$(echo $config | jq -r ".gistId")
  local github_user=$(echo $config | jq -r ".githubUser")
  local github_password=$(getKeychainPassword $github_user dotfiles_sync)

  # echo $config | jq -r ".dotFilePaths | .[]" | xargs -L1 -I {} bash -i -c "putDotFile {}"
  for row in $(echo $config | jq -r '.dotFilePaths | .[]'); do
    local fileName=$(getGistFileName $row)
    read -r -p "Pushing $row to $fileName?" put_confirm_response
    if [[ "$put_confirm_response" =~ ^([yY][eE][sS]|[yY])$ ]];
    then
      # Workaround for "No such file or directory" error when using ~ in the path: https://stackoverflow.com/a/3963747/640607
      local absolutePath=$(echo $row | sed -e "s:~/:$homedir/:g")
      cat $absolutePath | updateGistFile $github_user $github_password $dotfiles_gistid $fileName
    fi
  done
}

pull() {
  failOnMissingConfig

  eval homedir=$HOME_DIR
  local config=$(cat $DOTFILESYNC_CONFIG)
  local dotfiles_gistid=$(echo $config | jq -r ".gistId")
  local github_user=$(echo $config | jq -r ".githubUser")
  local github_password=$(getKeychainPassword $github_user dotfiles_sync)

  for row in $(echo $config | jq -r '.dotFilePaths | .[]'); do
    # getDotFile $row $github_password
    local fileName=$(getGistFileName $row)
    read -r -p "Updating $row from $fileName?" get_confirm_response
    if [[ "$get_confirm_response" =~ ^([yY][eE][sS]|[yY])$ ]];
    then
      local absolutePath=$(echo $row | sed -e "s:~/:$homedir/:g")

      # Create backup before replacing
      echo "Creating a local back of $absolutePath..."
      backup $absolutePath

      # Fetch the contents
      getGistFile $github_user $github_password $dotfiles_gistid $fileName > $absolutePath
    fi
  done
}

cleanup() {
  failOnMissingConfig

  local config=$(cat $DOTFILESYNC_CONFIG)
  local github_user=$(echo $config | jq -r ".githubUser")
  local gistId=$(echo $config | jq -r ".gistId")

  echo "Deleting GitHub gist credentials for user: $github_user, from the Keychain."
  deleteKeychainPassword $github_user "dotfiles_sync"

  echo "Deleting the config file from $DOTFILESYNC_CONFIG_PATH"
  rm -rf $DOTFILESYNC_CONFIG

  echo "Your gist with id: $gistId is not deleted. You can delete the gist from here: https://gist.github.com/$github_user/$gistId"

  echo "You may now delete the script file located under $DOTFILESYNC_ROOT_PATH, and also remove the alias from zsh config. For more instructions, refer to https://github.com/snvishna/dotfilesync#uninstall"
}

case "$1" in

  [sS][eE][tT][uU][pP])
    setup
    ;;

  [pP][uU][sS][hH])
    push
    ;;

  [pP][uU][lL][lL])
    pull
    ;;
  
  [cC][lL][eE][aA][nN][uU][pP])
    cleanup
    ;;

  *)
    echo 'usage: dfsync push|pull|setup|cleanup. Refer to the documentation for more details: https://github.com/snvishna/dotfilesync/blob/master/README.md#usage';
    ;;

esac
